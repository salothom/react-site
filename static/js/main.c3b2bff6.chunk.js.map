{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Graph","state","coolThings","name","coolness","Array","fill","map","el","i","left","key","coolLength","this","length","bars","push","percent","label","className","renderLines","renderBars","React","Component","Bar","console","log","style","width","Line","App","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAiCMA,E,2MACJC,MAAQ,CACNC,WAAY,CACV,CAAEC,KAAM,gBAAiBC,SAAU,MACnC,CAAED,KAAM,qCAAsCC,SAAU,KACxD,CAAED,KAAM,kCAAmCC,SAAU,MACrD,CAAED,KAAM,kCAAmCC,SAAU,MACrD,CAAED,KAAM,uBAAwBC,SAAU,MAC1C,CAAED,KAAM,wBAAyBC,SAAU,MAC3C,CAAED,KAAM,8BAA+BC,SAAU,Q,6EAMnD,OAAOC,MAAM,IAAIC,KAAK,MAAMC,KAAI,SAACC,EAAIC,GAAL,OAC9B,kBAAC,EAAD,CAAMC,KAAMD,GAAK,IAAI,IAAKE,IAAKF,S,mCAOjC,IAFA,IAAMG,EAAaC,KAAKZ,MAAMC,WAAWY,OACrCC,EAAO,GACFN,EAAI,EAAGA,EAAIG,EAAYH,IAC9BM,EAAKC,KAAK,kBAAC,EAAD,CAAKC,QAASJ,KAAKZ,MAAMC,WAAWO,GAAGL,SAAUc,MAAOL,KAAKZ,MAAMC,WAAWO,GAAGN,QAG7F,OAAOY,I,+BAGP,OACE,yBAAKI,UAAU,iBACb,0DAEA,yBAAKA,UAAU,SAEb,yBAAKA,UAAU,uBACZN,KAAKO,cACLP,KAAKQ,oB,GAtCEC,IAAMC,WA+DpBC,EAAM,SAAC,GAAwB,IAAtBP,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAEtB,OADAO,QAAQC,IAAIR,GAEV,yBAAKC,UAAU,cACb,0BAAMA,UAAU,SAASD,GAC3B,yBAAKC,UAAU,MAAMQ,MAAO,CAAEC,MAAgB,KAARX,EAAgB,SAKpDY,EAAO,SAAC,GAAc,IAAZnB,EAAW,EAAXA,KACd,OACE,yBAAKS,UAAU,OAAOQ,MAAO,CAAEjB,KAAMA,EAAO,QAOjCoB,EA/Gf,WAEE,OACE,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAEhB,uBAAGA,UAAU,WACXY,KAAK,8CAELC,IAAI,uBAHN,uBAMA,uBAAGb,UAAU,WACXY,KAAK,qCAELC,IAAI,uBAHN,iBAOA,kBAAC,EAAD,MACA,0CAEA,wBAAIb,UAAU,gBAAd,0BCdYc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c3b2bff6.chunk.js","sourcesContent":["import React from 'react';\n// import logo from 'favicon.png';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <a className=\"App-link\"\n          href=\"https://www.linkedin.com/in/sarahthompson3/\"\n          // target=\"_blank\"\n          rel=\"noopener noreferrer\" >\n          Check out Linkedin.\n        </a>\n        <a className=\"App-link\"\n          href=\"https://sarahloisthompson.com/home\"\n          // target=\"_blank\"\n          rel=\"noopener noreferrer\" >\n          Angular Site.\n        </a>\n\n        <Graph />\n        <p>*Source: Me</p>\n\n        <h2 className=\"headerFooter\">Sarah Lois Thompson\n        </h2>\n\n      </header>\n    </div>\n  );\n}\nclass Graph extends React.Component {\n  state = {\n    coolThings: [\n      { name: 'Blueberry Tea', coolness: '87' },\n      { name: 'Chocolate Soft Serve w/o Sprinkles', coolness: '7' },\n      { name: 'Vanilla Soft Serve w/ Sprinkles', coolness: '83' },\n      { name: 'People using ellipses in emails', coolness: '17' },\n      { name: 'Public Library Cards', coolness: '92' },\n      { name: 'The Last Slice of Pie', coolness: '62' },\n      { name: 'Having a whole Pie to share', coolness: '95' }\n    ]\n  }\n\n\n  renderLines() {\n    return Array(12).fill(null).map((el, i) => (\n      <Line left={i * (100/12)} key={i} />\n    ));\n  }\n  renderBars() {\n    // const { coolThings } = this.state.coolThings;\n    const coolLength = this.state.coolThings.length;\n    let bars = [];\n    for (let i = 0; i < coolLength; i++) {\n      bars.push(<Bar percent={this.state.coolThings[i].coolness} label={this.state.coolThings[i].name} />\n      )\n    }\n    return bars;\n  }\n  render() {\n    return (\n      <div className=\"graph-wrapper\">\n        <h4>How Great Some Things Are*</h4>\n\n        <div className=\"graph\">\n          {/* <BarTextContext labels={this.state.coolThings} /> */}\n          <div className=\"bar-lines-container\">\n            {this.renderLines()}\n            {this.renderBars()}\n\n          </div >\n\n        </div>\n      </div>\n    )\n  }\n}\nconst BarTextContext = ({ labels }) => {\n  return (\n    <div className=\"bar-text-context\">\n      {/* {\n      labels.map((labels)=>(\n        <div className=\"text\">\n      {labels.name}\n        </div>\n\n\n      ))\n    } */}\n    </div>\n  )\n}\n\nconst Bar = ({ percent, label }) => {\n  console.log(label);\n  return (\n    <div className=\"labelCombo\">\n      <span className=\"label\">{label}</span>\n    <div className=\"bar\" style={{ width: (percent*.833) + '%' }} />\n    </div>\n    \n  )\n}\nconst Line = ({ left }) => {\n  return (\n    <div className=\"line\" style={{ left: left + '%' }} />\n  )\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}